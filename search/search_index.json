{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simulation Software Engineering","text":"<p>Welcome to the homepage of the course \"Simulation Software Engineering\" at the University of Stuttgart. You find general information about the course under course information and in the video below.</p> <p> </p> <p>Some quotes from previous evaluations:</p> <ul> <li>I wished I had such a lecture already during my Bachelor's program.</li> <li>I like that we've seen so many different topics that are relevant for each project you work on.</li> <li>High practical relevance also beyond simulation science.</li> <li>I especially liked the fact that the lectures are always connected with real examples, such as the connections with the open-source project preCICE.</li> </ul> <p>More details on the course content and the place and time. If you have any questions or suggestions, please contact the instructors.</p> <p>Next course in winter term 2025/26 (see also C@MPUS).</p>"},{"location":"course-content/","title":"Course content","text":""},{"location":"course-content/#lecture-and-lab-assignments","title":"Lecture and lab assignments","text":"<p>The lecture and the accompanying lab assignments are organized in 7 chapters.</p>"},{"location":"course-content/#0-organization-and-introduction-to-rse","title":"0. Organization and Introduction to RSE","text":"<ul> <li>Lecture, lab organization, and the challenge</li> <li>What is research software engineering and what is special about it?</li> <li>Why do we need research software engineering?</li> </ul>"},{"location":"course-content/#1-version-control","title":"1. Version Control","text":"<ul> <li>Refresh and organize students' existing knowledge on Git (learn how to learn more).</li> <li>Explain difference between merge and rebase and when to use what.</li> <li>Use Git workflows to organize research software development in a team.</li> <li>Know about a few useful GitHub/GitLab standards and a few helpful tools.</li> </ul>"},{"location":"course-content/#2-virtualization-and-containers","title":"2. Virtualization and Containers","text":"<ul> <li>Name differences between virtualization and containers and name use cases for each.</li> <li>Create and modify virtual machines with VirtualBox and generate them with Vagrant.</li> <li>Create and manage Docker containers.</li> <li>Name containerization technologies beyond Docker and name their main differences.</li> </ul>"},{"location":"course-content/#3-building-and-packaging","title":"3. Building and Packaging","text":"<ul> <li>Explain why software is packaged.</li> <li>Create Python packages, publish on PyPI, and install with pip.</li> <li>Understand the difference between static and dynamic libraries and common ways of installation on Linux.</li> <li>Build C++ software and handle dependencies with Make and CMake.</li> <li>Package C++ software with CPack and create Debian packages.</li> <li>Create Spack packages, e.g., for high-performance computing systems with restricted access rights.</li> </ul>"},{"location":"course-content/#4-documentation","title":"4. Documentation","text":"<ul> <li>Be aware that documentation is crucial in RSE.</li> <li>Understand that there is a difference between documentation and good documentation.</li> <li>Know the purpose and basic structure of several standard documentation building blocks (README, commit message, changelog, ...).</li> <li>Read and write common lightweight markup languages and generate PDF files from them.</li> <li>Know about the most important website generators and hosting options for research software documentation.</li> </ul>"},{"location":"course-content/#5-testing-and-continuous-integration","title":"5. Testing and Continuous Integration","text":"<ul> <li>Justify the effort of developing testing infrastructure for simulation software.</li> <li>Discern the concepts of unit testing, integration testing, and regression testing with the perspective of simulation software.</li> <li>Work with the Python testing frameworks pytest and unittest.</li> <li>Write simple tests for C++ toy codes with Boost.Test.</li> <li>Know about general concepts of test frameworks such as fixtures and decorators.</li> <li>Name and explain common workflows to automate in RSE.</li> <li>Write basic automation scripts for GitHub Actions.</li> <li>Read basic automation scripts for GitLab CI/CD and explain the necessary steps to host GitLab Runners yourself.</li> <li>Use CTest to call tests from CMake.</li> </ul>"},{"location":"course-content/#6-miscellaneous","title":"6. Miscellaneous","text":"<ul> <li>Know the basics about several other important things concerning research software engineering: FAIRness of research data and research software, FLOSS licenses, versioning schemes, repository layout standards, and more.</li> </ul>"},{"location":"course-content/#the-challenge","title":"The challenge","text":"<p>Parallel to the weekly lab work, you work on an individual challenge, where you apply the learned concepts and tools with the ultimate goal to contribute to a large-scale community simulation software package. The challenge is structured in three parts, whereas each part is completed by a short presentation of the intermediate results in class:</p> <ol> <li>You get acquainted with the basic functionality of a large-scale simulation software package (such as FEniCS, PETSc, TRILINOS, DuMuX, preCICE, or SU2) by studying tutorials and documentation (first third of the course)</li> <li>You analyze the RSE infrastructure and the development cycle of the software package (second third of the course).</li> <li>You contribute to the software package. The contribution can be small, but should not be trivial. Possible examples: Adding a new tutorial, extending the documentation, working on a \"good first issue\", adding support of a new package manager. Important is to properly go through all development steps if possible (contact community, open issue, open pull request, test, review, merge).</li> </ol> <p>We got amazing contributions when we did this lecture previously:</p>"},{"location":"course-content/#highlights-from-previous-semesters","title":"Highlights from previous semesters","text":"<ul> <li>Julius Herb implemented several demos, including one for the biharmonic equation to the finite element library FEniCSx.</li> <li>Felix Neubauer implemented a replay module for the agent-based simulation framework MESA.</li> <li>Kim Kr\u00f6ner added user documentation to the Julia visualization toolbox Makie.</li> <li>Larissa Brencher, among other contributions, implemented a new graph partitioning via the PT-Scotch package into the porous media simulator DuMuX.</li> <li>Sabri Bektas extended the OsmWebWizard of the traffic simulation package SUMO to allow the user to distinguish between road types, minimizing the downloaded and rendered OpenStreetMap data.</li> <li>Jonathan Haag improved a tutorial of the agent-based modeling framework MESA.</li> <li>Max Hausch contributed in many different ways to the  emulator for rapid prototyping of software defined networks Mininet</li> <li>Nicolas Geldner, among other contributions, simplified geometric calculations in the coupling library preCICE.</li> <li>Vaishnavi Wani contributed a coupled thermoelastic solver to the computational fluid dynamics code SU2 (see a related tutorial).</li> </ul> <p>Some quotes from students:</p> <ul> <li>All in all it was massive experience for me. I never contributed to an OpenSource project and while doing this challenge I learned a lot.</li> <li>The communication with the developers was usually fast and they offered a lot of help and feedback regarding my work.</li> <li>I found the whole experience fun, and I'm certain that I'm way more comfortable to contribute and engage in open source projects in the future.</li> </ul>"},{"location":"course-information/","title":"Course information","text":""},{"location":"course-information/#research-software-engineering","title":"Research Software Engineering","text":"<p>Software is an integral part of nowadays research. A UK survey in 2014 found that 7 out of 10 researchers could not conduct research without software. However, research software engineering (RSE) does not yet get the necessary attention in research and in teaching. All this applies to simulation software in particular.</p> <p>Read more:</p> <ul> <li>Association of German Research Software Engineers: de-RSE</li> <li>Position paper of de-RSE</li> </ul>"},{"location":"course-information/#idea-of-the-course","title":"Idea of the course","text":"<p>The course is about simulation software. More precisely, we discuss the software tools used to ensure good software engineering for open-source simulation software such as FEniCS, PETSc, TRILINOS, DuMuX, preCICE, or SU2. This is not a course focused on programming and programming paradigms, but on the techniques and the corresponding tools. Some examples are version control (Git, GitHub, GitLab), virtualization/containerization (Docker), continuous integration (GitHub Actions, GitLab CI), or documentation  (Jekyll, mkdocs, sphinx). We study these concepts and tools in lectures and (almost) weekly lab assignments. In parallel, you work on an individual challenge, where you apply the learned concepts and tools with the ultimate goal to contribute to a large-scale community simulation software package. Read more on the course content.</p>"},{"location":"course-information/#target-audience","title":"Target audience","text":"<p>This course is aimed at master-level students from Computer Science, Simulation Technology and related fields, but is also open to PhD students or anyone else interested. We expect you to have some knowledge in software development, basic tools and programming. However, we also give you extra information or point to additional resources if you have the feeling you need to catch up with some topic.</p> <p>An example: In the lecture, we shortly touch on Git</p> <ul> <li>You are a Git expert? This is great. We try not to bore you.</li> <li>You have used Git before, but you basically use the same 5 commands all the time? This is fine and a good foundation to start.</li> <li>You had heard about Git some time in a lecture, but you have never used it? You are good to go with the examples in the lectures and the references presented there, but you probably have to catch up a bit.</li> </ul>"},{"location":"course-information/#resources","title":"Resources","text":"<p>All teaching resources are available (open-source) on GitHub and through this homepage.</p> <p>We encourage you to help us extend these resources and fix mistakes.</p>"},{"location":"course-information/#exam","title":"Exam","text":"<p>The course has a so-called \"course accompanying examination\". This means, there will be no single exam. Instead, we evaluate the students' performance on the individual challenge, on the weekly exercises, and on the overall engagement. Still, you will have to register for the \"exam\" on campus. Point of no return: Once you gave the first presentation (presumably early November), you have to register.</p>"},{"location":"course-information/#additional-information-for-simtech-students","title":"Additional information for SimTech students","text":"<p>You might also be interested in the course Sustainable Development of Simulation Software by Bernd Flemisch and Dennis Gl\u00e4ser, which is starting in summer term 2022. Their course has a stronger focus on software engineering patterns and project work in C++ for simulation software. Our course Simulation Software Engineering focuses more on the tools commonly used in the development of simulation software. The course of Flemisch/Gl\u00e4ser is not a prerequisite to follow our course on simulation software engineering and neither vice versa. We encourage you, however, to follow both courses if you are interested in the topic.</p>"},{"location":"course-information/#information-for-repository-maintainers","title":"Information for repository maintainers","text":"<p>This paragraph is meant for developers maintaining repositories to which students of the SSE course try to contribute.</p> <p>One of the learning goals of the SSE course is being able to contribute to existing large-scale research codes. One part of the course is to indeed contribute something small to such a code. As a maintainer of such a code, please treat the students as normal (experienced) external contributors. They learn in the SSE course how to follow contribution guidelines and other best practices. As a maintainer, you do not have to advise them as closely as you might do with your own students. Following your own contribution standards and code of conduct is sufficient. You can help the students by labeling suitable existing issues as good first issues. We, the lecturers of the SSE course, try to follow conversations of our students in issues or pull requests as closely as possible. You can always tag us on GitHub or directly reach out to us. Each year, we are giving the students a list of software projects as suggestions on where to contribute. If you ever want us to remove your project from this list, please let us know.</p>"},{"location":"place-and-time/","title":"Place and time","text":""},{"location":"place-and-time/#lecture-hall","title":"Lecture hall","text":"<p>Lectures take place in V47.05, Pfaffenwaldring 47, ground floor. Labs take place in 0.108, Universit\u00e4tsstrasse 38, ground floor. We plan to do the complete course on site. As the course is heavy on interactive labs, a hybrid mode seems not very suitable. Please contact us if you can only join online nonetheless. If needed, we will find a solution.</p>"},{"location":"place-and-time/#time","title":"Time","text":"<p>Lectures and lab work are both on Wednesdays:</p> <ul> <li>09:45\u201311:15</li> <li>15:45\u201317:15</li> </ul> <p>There is not strict distinction between both slots. It depends on the topic and the week. Normally, we do a more lecture-style session in the morning and a more lab-style session in the afternoon.</p>"},{"location":"place-and-time/#time-table","title":"Time table","text":"<p>You can find a detailed time table on GitHub.</p>"},{"location":"staff/","title":"Staff/contact","text":""},{"location":"staff/#lecturers","title":"Lecturers","text":"Name Institute Contact Benjamin Uekermann, GitHub Usability and Sustainability of Simulation Software benjamin.uekermann@ipvs.uni-stuttgart.de Ishaan Desai, GitHub Usability and Sustainability of Simulation Software ishaan.desai@ipvs.uni-stuttgart.de Gerasimos Chourdakis, GitHub Simulation of Large Systems gerasimos.chourdakis@ipvs.uni-stuttgart.de Fr\u00e9d\u00e9ric Simonis, GitHub Usability and Sustainability of Simulation Software frederic.simonis@ipvs.uni-stuttgart.de"},{"location":"staff/#previous-lecturers","title":"Previous lecturers","text":"<p>The course would have not been possible without ...</p> Name Institute Contact Alexander Jaust, Github Simulation of Large Systems alexander.jaust@ipvs.uni-stuttgart.de"}]}